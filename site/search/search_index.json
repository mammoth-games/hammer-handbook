{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Home This handbook contains information regarding processes and specifications for Hammer Game.","title":"Home"},{"location":"index.html#home","text":"This handbook contains information regarding processes and specifications for Hammer Game.","title":"Home"},{"location":"CostumeSpecification.html","text":"Costume Specification This specification codifies the creation and importing of a costume. It is underpinned by two constraints: Reused meshes should use the originally imported mesh Reuse textures whenever possible These stem from the memory limitations of mobile hardware; the importance of reducing texture and mesh memory cannot be overstated. General Information A costume is a set of textured meshes that are welded to the character. A costume is composed of 3 sections: Head, Torso, and Legs. Each section is further composed of meshes that are welded to specific body parts of the character. Costume section Character body parts Head Head Torso LeftArm, RightArm, Torso Legs LeftLeg, RightLeg Players can mix and match the 3 sections of any costumes they own. Variations Costumes may have multiple variations. Variations may use unique meshes and unique textures for body parts. Variations may also reuse meshes and textures for body parts. If a variation reuses a mesh, that mesh will not be re-uploaded. Warning Because reused meshes are not re-uploaded, you are bound to the UV map of the original mesh. Keep this in mind when you are creating the variation's texture. Eyes Costumes cannot have their own eye meshes, as an eye animation system will be used for facial expressions that react to the game. However, costumes can specify which eyes to hide and where they are located. Skin Humanoid costumes (ex. pirate, chef, miner) have skin exposed. It is important that players be able to customize their skin color. To accomplish this, map the UV islands of skin faces to a transparent pixel. This will allow for the color of the underlying Roblox object to show through, which will be the player's skin color. Texturing Process Modeler creates the costume Modeler organizes the file to follow this specification Modeler uploads the file to the drive Programmer downloads the file Programmer records the costume's metadata Programmer imports the individual meshes of the costume Programmer incorporates the metadata and meshes into the game Naming Name the file [costume]_[variation]_Costume.blend (ex: Pirate_Blackbeard_Costume.blend) Put the unaltered rig in a Rig collection. Hide or delete any of the limbs that you don\u2019t need. (ex: Pirate doesn\u2019t need the left leg because it would cover the peg leg) These meshes will not be imported to Roblox but are helpful in previewing the costume in full context. Put the costume meshes in a [costume]_[variation] collection. (ex: Pirate_Blackbeard) For each of the 6 body parts: If only one mesh corresponds to a body part, name it [body part] (ex: LeftLeg) If multiple objects correspond to a body part, put them in a collection named [body part] . Name each object in this sub-collection [body part]_[thing] . (ex: Head_Eyepatch) Name every vertex object the same as its mesh name. Not sure if this is necessary. I will figure it out. Set every object\u2019s pivot to its corresponding body part\u2019s pivot. This is necessary. If you stick to the naming conventions, I can write a script to automate this step. Put the Rig eyes in an Eyes collection in the [costume] collection. Position them as you please. Delete any unneeded eyes (ex: Pirate doesn\u2019t have a left eye due to the eye patch) . If no eyes are needed, don\u2019t create the Eyes collection. Metadata For transparency between modelers and programmers, here is the metadata for each costume that will be stored in the game. Category Variable Value type Required CostumeName string \u2713 VariationName string \u2713 Head HeadHidden boolean HeadMeshId rbxassetid:// HeadTextureId rbxassetid:// Legs LeftLegMeshId rbxassetid:// LeftLegTextureId rbxassetid:// RightLegMeshId rbxassetid:// RightLegTextureID rbxassetid:// Torso LeftArmMeshId rbxassetid:// LeftArmTextureId rbxassetid:// RightArmMeshId rbxassetid:// RightArmTextureId rbxassetid:// TorsoMeshId rbxassetid:// TorsoTextureId rbxassetid:// Eyes LeftEyePosition Vector2 LeftEyeHidden boolean RightEyePosition Vector2 RightEyeHidden boolean Implementation details If \"_MeshId\" is not specified, then \"_TextureId\" will be ignored If \"_MeshId\" is not specified, then the body part will fall back to the default character mesh \"_Hidden\" will hide a body part altogether If \"_Hidden\" is specified, then \"_MeshId\" and \"_TextureId\" are ignored If \"_EyeHidden\" is specified, then \"_EyePosition\" is ignored If \"_EyePosition\" is not specified, then the eye falls back to the default position","title":"Costume Specification"},{"location":"CostumeSpecification.html#costume-specification","text":"This specification codifies the creation and importing of a costume. It is underpinned by two constraints: Reused meshes should use the originally imported mesh Reuse textures whenever possible These stem from the memory limitations of mobile hardware; the importance of reducing texture and mesh memory cannot be overstated.","title":"Costume Specification"},{"location":"CostumeSpecification.html#general-information","text":"A costume is a set of textured meshes that are welded to the character. A costume is composed of 3 sections: Head, Torso, and Legs. Each section is further composed of meshes that are welded to specific body parts of the character. Costume section Character body parts Head Head Torso LeftArm, RightArm, Torso Legs LeftLeg, RightLeg Players can mix and match the 3 sections of any costumes they own.","title":"General Information"},{"location":"CostumeSpecification.html#variations","text":"Costumes may have multiple variations. Variations may use unique meshes and unique textures for body parts. Variations may also reuse meshes and textures for body parts. If a variation reuses a mesh, that mesh will not be re-uploaded. Warning Because reused meshes are not re-uploaded, you are bound to the UV map of the original mesh. Keep this in mind when you are creating the variation's texture.","title":"Variations"},{"location":"CostumeSpecification.html#eyes","text":"Costumes cannot have their own eye meshes, as an eye animation system will be used for facial expressions that react to the game. However, costumes can specify which eyes to hide and where they are located.","title":"Eyes"},{"location":"CostumeSpecification.html#skin","text":"Humanoid costumes (ex. pirate, chef, miner) have skin exposed. It is important that players be able to customize their skin color. To accomplish this, map the UV islands of skin faces to a transparent pixel. This will allow for the color of the underlying Roblox object to show through, which will be the player's skin color.","title":"Skin"},{"location":"CostumeSpecification.html#texturing","text":"","title":"Texturing"},{"location":"CostumeSpecification.html#process","text":"Modeler creates the costume Modeler organizes the file to follow this specification Modeler uploads the file to the drive Programmer downloads the file Programmer records the costume's metadata Programmer imports the individual meshes of the costume Programmer incorporates the metadata and meshes into the game","title":"Process"},{"location":"CostumeSpecification.html#naming","text":"Name the file [costume]_[variation]_Costume.blend (ex: Pirate_Blackbeard_Costume.blend) Put the unaltered rig in a Rig collection. Hide or delete any of the limbs that you don\u2019t need. (ex: Pirate doesn\u2019t need the left leg because it would cover the peg leg) These meshes will not be imported to Roblox but are helpful in previewing the costume in full context. Put the costume meshes in a [costume]_[variation] collection. (ex: Pirate_Blackbeard) For each of the 6 body parts: If only one mesh corresponds to a body part, name it [body part] (ex: LeftLeg) If multiple objects correspond to a body part, put them in a collection named [body part] . Name each object in this sub-collection [body part]_[thing] . (ex: Head_Eyepatch) Name every vertex object the same as its mesh name. Not sure if this is necessary. I will figure it out. Set every object\u2019s pivot to its corresponding body part\u2019s pivot. This is necessary. If you stick to the naming conventions, I can write a script to automate this step. Put the Rig eyes in an Eyes collection in the [costume] collection. Position them as you please. Delete any unneeded eyes (ex: Pirate doesn\u2019t have a left eye due to the eye patch) . If no eyes are needed, don\u2019t create the Eyes collection.","title":"Naming"},{"location":"CostumeSpecification.html#metadata","text":"For transparency between modelers and programmers, here is the metadata for each costume that will be stored in the game. Category Variable Value type Required CostumeName string \u2713 VariationName string \u2713 Head HeadHidden boolean HeadMeshId rbxassetid:// HeadTextureId rbxassetid:// Legs LeftLegMeshId rbxassetid:// LeftLegTextureId rbxassetid:// RightLegMeshId rbxassetid:// RightLegTextureID rbxassetid:// Torso LeftArmMeshId rbxassetid:// LeftArmTextureId rbxassetid:// RightArmMeshId rbxassetid:// RightArmTextureId rbxassetid:// TorsoMeshId rbxassetid:// TorsoTextureId rbxassetid:// Eyes LeftEyePosition Vector2 LeftEyeHidden boolean RightEyePosition Vector2 RightEyeHidden boolean","title":"Metadata"},{"location":"CostumeSpecification.html#implementation-details","text":"If \"_MeshId\" is not specified, then \"_TextureId\" will be ignored If \"_MeshId\" is not specified, then the body part will fall back to the default character mesh \"_Hidden\" will hide a body part altogether If \"_Hidden\" is specified, then \"_MeshId\" and \"_TextureId\" are ignored If \"_EyeHidden\" is specified, then \"_EyePosition\" is ignored If \"_EyePosition\" is not specified, then the eye falls back to the default position","title":"Implementation details"}]}