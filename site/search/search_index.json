{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home This handbook contains information regarding processes and specifications for Hammer Game.","title":"Home"},{"location":"#home","text":"This handbook contains information regarding processes and specifications for Hammer Game.","title":"Home"},{"location":"costume_spec/","text":"Costume Specification This specification codifies the creation and importing of a costume. It is underpinned by two constraints: Reused meshes should use the originally imported mesh Reuse textures whenever possible These stem from the memory limitations of mobile hardware; the importance of reducing texture and mesh memory cannot be overstated. General Information A costume is a set of textured meshes that are welded to the character. A costume is composed of 3 sections: Head, Torso, and Legs. Each section contains meshes that are welded to specific body parts of the character. Costume section Character body parts Head Head Torso LeftArm, RightArm, Torso Legs LeftLeg, RightLeg Players can mix and match the 3 sections of any costumes they own. Variations A costume can have multiple variations. A variation can be entirely unique or consist of a mix of unique/reused meshes and unique/reused textures. Consider these two variations of a Pirate costume. Patchy has a unique head mesh and reused torso and leg meshes from Crewmate. Patchy also has entirely unique textures. In the case where a mesh or texture is reused, that mesh or texture will not be re-uploaded to Roblox. Warning Because reused meshes are not re-uploaded, variations are stuck with the UV map of the original mesh. Keep this in mind when you are creating the variation's texture. Eyes Costumes cannot have their own eye meshes because we will use a separate eye animation system for facial expressions that react to the game. However, costumes can specify the 2D location of each eye and which eyes to hide. For example, Crewmate has its left eye hidden and Patchy has both eyes hidden. Also, Crewmate has its right eye shifted down because the pirate hat covers the eye in the default position. Skin Humanoid costumes (ex. pirate, chef, miner) have skin exposed. It is important that players be able to customize their skin color. To accomplish this, map the UV islands of skin faces to a transparent pixel. This will allow for the color of the underlying Roblox object to show through, which will be the player's skin color. Texturing We are aiming for a style with a small number of solid colors per character. This means that textures should only be a few pixels wide and tall. Process Modeler creates the costume Modeler organizes the file to follow this specification Modeler uploads the file to the drive Programmer downloads the file Programmer records the costume's metadata Programmer imports the unique meshes and textures of the costume Programmer incorporates the metadata, meshes, and textures into the game Naming Name the file [Costume]_[Variation]_Costume.blend . (ex: Pirate_Blackbeard_Costume.blend) Put the unaltered rig in a Rig collection. Hide or delete any of the limbs that you don\u2019t need. (ex: Pirate doesn\u2019t need the left leg because it would cover the peg leg) These meshes will not be imported to Roblox but are helpful in previewing the costume in full context. Put the costume meshes in a [Costume]_[Variation] collection. (ex: Pirate_Blackbeard) For each of the 6 body parts: If only one mesh corresponds to a body part, name it $[BodyPart] . (ex: $LeftLeg) If multiple objects correspond to the same body part, put them in a collection named [BodyPart] . Name each object in this sub-collection $[BodyPart]_[MeshName] . (ex: $Head_Eyepatch) The $ signs are to differentiate the costume meshes from the rig meshes. Name every vertex object the same as its mesh name. Not sure if this is necessary. I will figure it out. Set every object\u2019s pivot to its corresponding body part\u2019s pivot. This is necessary. If you stick to the naming conventions, I can write a script to automate this step. Put the Rig eyes in an Eyes collection in the [Costume]_[Variation] collection. Position them as you please. Delete any unneeded eyes (ex: Crewmate doesn\u2019t have a left eye due to the eye patch) . If no eyes are needed, don\u2019t create the Eyes collection. Metadata For transparency between modelers and programmers, here is the metadata that will be stored for each costume in-game. Category Variable Value type Required CostumeName string \u2713 VariationName string \u2713 Head HeadHidden boolean HeadMeshId rbxassetid HeadTextureId rbxassetid Legs LeftLegHidden boolean LeftLegMeshId rbxassetid LeftLegTextureId rbxassetid RightLegHidden boolean RightLegMeshId rbxassetid RightLegTextureID rbxassetid Torso LeftArmHidden boolean LeftArmMeshId rbxassetid LeftArmTextureId rbxassetid RightArmHidden boolean RightArmMeshId rbxassetid RightArmTextureId rbxassetid TorsoHidden boolean TorsoMeshId rbxassetid TorsoTextureId rbxassetid Eyes LeftEyePosition Vector2 LeftEyeHidden boolean RightEyePosition Vector2 RightEyeHidden boolean Implementation details If \"_MeshId\" is not specified, then the body part will fall back to the default character mesh If \"_MeshId\" is not specified, then \"_TextureId\" will be ignored \"_Hidden\" will hide a body part altogether If \"_Hidden\" is specified, then \"_MeshId\" and \"_TextureId\" are ignored If \"_EyeHidden\" is specified, then \"_EyePosition\" is ignored If \"_EyePosition\" is not specified, then the eye falls back to the default position","title":"Costume Specification"},{"location":"costume_spec/#costume-specification","text":"This specification codifies the creation and importing of a costume. It is underpinned by two constraints: Reused meshes should use the originally imported mesh Reuse textures whenever possible These stem from the memory limitations of mobile hardware; the importance of reducing texture and mesh memory cannot be overstated.","title":"Costume Specification"},{"location":"costume_spec/#general-information","text":"A costume is a set of textured meshes that are welded to the character. A costume is composed of 3 sections: Head, Torso, and Legs. Each section contains meshes that are welded to specific body parts of the character. Costume section Character body parts Head Head Torso LeftArm, RightArm, Torso Legs LeftLeg, RightLeg Players can mix and match the 3 sections of any costumes they own.","title":"General Information"},{"location":"costume_spec/#variations","text":"A costume can have multiple variations. A variation can be entirely unique or consist of a mix of unique/reused meshes and unique/reused textures. Consider these two variations of a Pirate costume. Patchy has a unique head mesh and reused torso and leg meshes from Crewmate. Patchy also has entirely unique textures. In the case where a mesh or texture is reused, that mesh or texture will not be re-uploaded to Roblox. Warning Because reused meshes are not re-uploaded, variations are stuck with the UV map of the original mesh. Keep this in mind when you are creating the variation's texture.","title":"Variations"},{"location":"costume_spec/#eyes","text":"Costumes cannot have their own eye meshes because we will use a separate eye animation system for facial expressions that react to the game. However, costumes can specify the 2D location of each eye and which eyes to hide. For example, Crewmate has its left eye hidden and Patchy has both eyes hidden. Also, Crewmate has its right eye shifted down because the pirate hat covers the eye in the default position.","title":"Eyes"},{"location":"costume_spec/#skin","text":"Humanoid costumes (ex. pirate, chef, miner) have skin exposed. It is important that players be able to customize their skin color. To accomplish this, map the UV islands of skin faces to a transparent pixel. This will allow for the color of the underlying Roblox object to show through, which will be the player's skin color.","title":"Skin"},{"location":"costume_spec/#texturing","text":"We are aiming for a style with a small number of solid colors per character. This means that textures should only be a few pixels wide and tall.","title":"Texturing"},{"location":"costume_spec/#process","text":"Modeler creates the costume Modeler organizes the file to follow this specification Modeler uploads the file to the drive Programmer downloads the file Programmer records the costume's metadata Programmer imports the unique meshes and textures of the costume Programmer incorporates the metadata, meshes, and textures into the game","title":"Process"},{"location":"costume_spec/#naming","text":"Name the file [Costume]_[Variation]_Costume.blend . (ex: Pirate_Blackbeard_Costume.blend) Put the unaltered rig in a Rig collection. Hide or delete any of the limbs that you don\u2019t need. (ex: Pirate doesn\u2019t need the left leg because it would cover the peg leg) These meshes will not be imported to Roblox but are helpful in previewing the costume in full context. Put the costume meshes in a [Costume]_[Variation] collection. (ex: Pirate_Blackbeard) For each of the 6 body parts: If only one mesh corresponds to a body part, name it $[BodyPart] . (ex: $LeftLeg) If multiple objects correspond to the same body part, put them in a collection named [BodyPart] . Name each object in this sub-collection $[BodyPart]_[MeshName] . (ex: $Head_Eyepatch) The $ signs are to differentiate the costume meshes from the rig meshes. Name every vertex object the same as its mesh name. Not sure if this is necessary. I will figure it out. Set every object\u2019s pivot to its corresponding body part\u2019s pivot. This is necessary. If you stick to the naming conventions, I can write a script to automate this step. Put the Rig eyes in an Eyes collection in the [Costume]_[Variation] collection. Position them as you please. Delete any unneeded eyes (ex: Crewmate doesn\u2019t have a left eye due to the eye patch) . If no eyes are needed, don\u2019t create the Eyes collection.","title":"Naming"},{"location":"costume_spec/#metadata","text":"For transparency between modelers and programmers, here is the metadata that will be stored for each costume in-game. Category Variable Value type Required CostumeName string \u2713 VariationName string \u2713 Head HeadHidden boolean HeadMeshId rbxassetid HeadTextureId rbxassetid Legs LeftLegHidden boolean LeftLegMeshId rbxassetid LeftLegTextureId rbxassetid RightLegHidden boolean RightLegMeshId rbxassetid RightLegTextureID rbxassetid Torso LeftArmHidden boolean LeftArmMeshId rbxassetid LeftArmTextureId rbxassetid RightArmHidden boolean RightArmMeshId rbxassetid RightArmTextureId rbxassetid TorsoHidden boolean TorsoMeshId rbxassetid TorsoTextureId rbxassetid Eyes LeftEyePosition Vector2 LeftEyeHidden boolean RightEyePosition Vector2 RightEyeHidden boolean","title":"Metadata"},{"location":"costume_spec/#implementation-details","text":"If \"_MeshId\" is not specified, then the body part will fall back to the default character mesh If \"_MeshId\" is not specified, then \"_TextureId\" will be ignored \"_Hidden\" will hide a body part altogether If \"_Hidden\" is specified, then \"_MeshId\" and \"_TextureId\" are ignored If \"_EyeHidden\" is specified, then \"_EyePosition\" is ignored If \"_EyePosition\" is not specified, then the eye falls back to the default position","title":"Implementation details"}]}